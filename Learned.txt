JSON.parse();
JSON.stringify();
res.json();

res.status(200).send();
res.status(200).json({status: 'success', results: tours.length, data: {...}})
res.status(201)  //created
res.status(204)  //No Content //for Delete
res.status(500)  //Internal Server Error
res.status(400)  //Bad Request
res.status(401)  //Unauthorized

req.body;
req.params;
req.query;
req.headers;

/api/v1/tours
/api/v1/tours/:id
/api/v1/tours/:id/:number?

express.json();
express.Router() / .route('/').get().post().patch().delete()
express.static('root folder path for static filess')

${__dirname}, ${__filename}

app.use(express.json()); //used to parse the incoming requests with JSON payloads
app.use(middlwarefunction); // (req,res,next)=>{...} //(req,res,next,val)=>{...}
morgan middleware // used for log http requests
middleware chaining

Object.assign({ id: newId }, req.body);

.replace()
.split()
.join()

app.get('env') //default env in express is development
process.env   //environment variable (global) for node
config.env //file for env variables /dotenv.config({ path: './config.env' });

const newTour = new Tour();
newTour.save();
Tour
    .create({document data object});
    .find();
    .find().where().equals().where().lte();
    .findOne({_id: id_data})
    .findById({id of document});
    .findByIdAndUpdate({id of document},{updated body of document});
    .findByIdAndDelete({id of document});

new mongoose.Schema({ field|property:{
    type: Date
    required: [true, message] 
    unique: 
    default: Date.now()
    select:
    trim:
}},{
    toJSON: {virtuals: true}
    toObject: {virtuals: true}
})
schemaObj.virtual('derivedProperty').get(func())
schemaObj.pre('event',func())  //event<->hooks
schemaObj.post('event',func())

mongoose-query
    .sort()
    .select()
    .skip()
    .limit()

mongoose-model 
    .aggregate([  
        //$sum: 1, $avg, $min, $max, $gte, $gt, $lte, $lt, $month, $push  /'$docProperty'
        { $match: {} },
        { $group: { _id: {} | null } },
        { $sort: { 1 | -1 } },
        { $unwind: {} },
        { $addFields: {} },
        { $project: { 0 | 1 } },
        { $limit: 10 },
      },
    ])

mongoose-middlewares
    Document Middleware | Hooks [ 'save' 'validate' ] //events<->hooks
    Query Middleware | Hooks [ 'find' 'findOne' ]
    Aggregate Middleware | Hook 'aggregate'

mongoose-validators
    required, min, max, minlength, maxlength, enum:{}, validate:function(value)->true/false

Error Handling
1. create global error handler middleware      app.use((err, req, res, next) => {})
2. Unhandled route      app.all('*', (req, res, next) => {}

jsonwebtoken   sign,verify
bcrypt -> password
     async functions  bcrypt.hash() bcrypt.compare()

instance method of a model schemaObj.method.functionname

process.argv
// eslint-disable-next-line no-console